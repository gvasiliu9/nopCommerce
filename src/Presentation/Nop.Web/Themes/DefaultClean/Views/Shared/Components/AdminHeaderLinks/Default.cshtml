@model AdminHeaderLinksModel
@if (Model.IsCustomerImpersonated || Model.DisplayAdminLink)
{
    <div id="admin-links" class="d-flex justify-content-evenly align-items-center py-1">
        @if (Model.IsCustomerImpersonated)
        {
            <div class="impersonate">
                <span>@string.Format(T("Account.ImpersonatedAs").Text, Model.ImpersonatedCustomerName)</span>
                <a href="@Url.RouteUrl("Logout")" class="finish-impersonation"
                    title="@T("Account.ImpersonatedAs.Finish.Hint")">@T("Account.ImpersonatedAs.Finish")</a>
            </div>
        }
        @if (Model.DisplayAdminLink)
        {
            <a href="@Url.Content("~/Admin")" class="administration">
                <i class="fas fa-hammer pe-2"></i>@T("Account.Administration")
            </a>
        }
        @if (!string.IsNullOrEmpty(Model.EditPageUrl))
        {
            <a href="@Model.EditPageUrl" class="manage-page">
                <i class="fas fa-pen pe-2"></i>@T("Common.ManagePage")
            </a>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new
            {
                widgetZone =
                PublicWidgetZones.AdminHeaderLinksAfter,
                additionalData = Model
            })
    </div>
}